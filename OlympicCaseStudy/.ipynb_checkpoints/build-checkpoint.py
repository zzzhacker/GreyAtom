{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"\n",
    "        Enter your code here\n",
    "    \"\"\"\n",
    "    df=pd.read_csv('olympics.csv',skiprows=[0])\n",
    "    df=df.rename(columns={'01 !' : 'Summer_Gold', '02 !' : 'Summer_Silver', '03 !' : 'Summer_Bronze',\n",
    "                          '01 !.1' : 'Winter_Gold', '02 !.1' : 'Winter_Silver', '03 !.1' : 'Winter_Bronze',\n",
    "                          '01 !.2' : 'Combined_Gold', '02 !.2' : 'Combined_Silver', '03 !.2' : 'Combined_Bronze'})\n",
    "    df['country_name']=df['Unnamed: 0'].str.split('\\(|\\)',expand=True).astype(str)[0]\n",
    "    df['country_name']=df['country_name'].str.strip()\n",
    "    df['country_code']=df['Unnamed: 0'].str.split('\\(|\\)',expand=True).astype(str)[1]\n",
    "    df=df.drop(['Unnamed: 0','Total'],axis=1)\n",
    "    df=df.set_index('country_name')\n",
    "    return df[:-1]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def first_country(df):\n",
    "    \"\"\"\n",
    "        Enter your code here\n",
    "    \"\"\"\n",
    "    return df.index[0]\n",
    "\n",
    "\n",
    "\n",
    "def gold_medal(df):\n",
    "    \"\"\"\n",
    "        Enter your code here\n",
    "    \"\"\"\n",
    "    return df['Summer_Gold'].idxmax()\n",
    "\n",
    "\n",
    "\n",
    "def biggest_difference_in_gold_medal(df):\n",
    "    \"\"\"\n",
    "        Enter your code here\n",
    "    \"\"\"\n",
    "    return (abs(df['Summer_Gold']-df['Winter_Gold'])).idxmax()\n",
    "\n",
    "\n",
    "\n",
    "def get_points(df):\n",
    "    \"\"\"\n",
    "    Enter your code here\n",
    "    \"\"\"\n",
    "    df['Points']=df['Combined_Gold']*3+df['Combined_Silver']*2+df['Combined_Bronze']\n",
    "    return df['Points']\n",
    "\n",
    "\n",
    "\"\"\"here I find best k with silhouette_score but as well in datascience that find best k not a good choice just \n",
    "to consider silhouette_score not enough its better to analysis on elbow method and gap statistics also to find \n",
    "best possible k value\"\"\"\n",
    "\n",
    "\"\"\"here start and end are range and return k=number of cluster and centers=array with centers of k clusters\"\"\"\"\n",
    "def k_means(df,start=3,end=10): \n",
    "    from sklearn.cluster import KMeans\n",
    "    from sklearn.preprocessing import scale\n",
    "    X=scale(df.drop(['country_code'],axis=1))\n",
    "    from sklearn.metrics import  silhouette_score\n",
    "    d={}\n",
    "    c=[]\n",
    "    for k in range(start,end):\n",
    "        clusterer = KMeans(n_clusters=k, random_state=4)\n",
    "        cluster_labels = clusterer.fit_predict(X)\n",
    "        silhouette_avg = silhouette_score(X, cluster_labels,sample_size=100,random_state=2)\n",
    "        d[k]= silhouette_avg\n",
    "        c.append(clusterer.cluster_centers_)\n",
    "    centers=c[max(d, key=d.get)-start]\n",
    "    k=max(d, key=d.get)\n",
    "    return k,centers"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
